; not equal
(define != (lambda (a b) (not (= a b))))

; check for nil and define its constant
(define nil '())
(define nil? (lambda (x) (is? x nil)))

; return a list of the passed-in items
(define list (lambda (items...) items))

; return the length of a proper list
(define length (lambda (list)
    (cond ((nil? list) 0)
          (#t (+ 1 (length (cdr list)))))))

; return the nth item in a list. if n is less than 0 or out of bounds, errors.
(define nth (lambda (n list)
    (cond ((= n 0) (car list))
          ((> n 0) (nth (- n 1) (cdr list))))))

; reverse a list
(define reverse (lambda (list)
    (reverse-aux list nil)))

(define reverse-aux (lambda (list accum)
  (cond ((nil? list) accum)
        (#t (reverse-aux (rest list) (cons (first list) accum))))))

; shortcuts for common list accessors
(define rest cdr)
(define first car)

; shortcuts for car/cdr combos
(define caar (lambda (x) (car (car x))))
(define cadr (lambda (x) (car (cdr x))))
(define cdar (lambda (x) (cdr (car x))))
(define cddr (lambda (x) (cdr (cdr x))))
(define caaar (lambda (x) (car (car (car x)))))
(define caadr (lambda (x) (car (car (cdr x)))))
(define cadar (lambda (x) (car (cdr (car x)))))
(define caddr (lambda (x) (car (cdr (cdr x)))))
(define cdaar (lambda (x) (cdr (car (car x)))))
(define cdadr (lambda (x) (cdr (car (cdr x)))))
(define cddar (lambda (x) (cdr (cdr (car x)))))
(define cdddr (lambda (x) (cdr (cdr (cdr x)))))
(define caaaar (lambda (x) (car (car (car (car x))))))
(define caaadr (lambda (x) (car (car (car (cdr x))))))
(define caadar (lambda (x) (car (car (cdr (car x))))))
(define caaddr (lambda (x) (car (car (cdr (cdr x))))))
(define cadaar (lambda (x) (car (cdr (car (car x))))))
(define cadadr (lambda (x) (car (cdr (car (cdr x))))))
(define caddar (lambda (x) (car (cdr (cdr (car x))))))
(define cadddr (lambda (x) (car (cdr (cdr (cdr x))))))
(define cdaaar (lambda (x) (cdr (car (car (car x))))))
(define cdaadr (lambda (x) (cdr (car (car (cdr x))))))
(define cdadar (lambda (x) (cdr (car (cdr (car x))))))
(define cdaddr (lambda (x) (cdr (car (cdr (cdr x))))))
(define cddaar (lambda (x) (cdr (cdr (car (car x))))))
(define cddadr (lambda (x) (cdr (cdr (car (cdr x))))))
(define cdddar (lambda (x) (cdr (cdr (cdr (car x))))))
(define cddddr (lambda (x) (cdr (cdr (cdr (cdr x))))))
